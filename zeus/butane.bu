variant: fcos
version: 1.4.0
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxNpFK/kKbp53DJarquYTeNZXLnYNbSjQiEti24vRqHIRmD3wvLpX1NiiIY7xnP3rwEY8s1NjHarKXLYmCBrOZKkBxu5U6ROyLMCCfhCXBcJXUVJng1PmoJ4+hlIPWq3I136Y4ZP1xiKWKVuMa6vC06wqA5m6bh5TEqDNOP+cW6dn3qX7sy0qNtiZU8VmJ5fM9kHA02bZf3YYlK4780ESVY8RU3zOTZDvnOZUuIRLpMgsDH3eqyu2AKvnMNPrNxSYGffd6PXeng2rIEaV49/LnO1Cw61vDWYUL8jULzZ+SqE5ydnOUGfqguOTEYbtaXhBrYECgDCDGvRXF0VAaj3D7 jerred@jerred-macbook.local
      groups:
        - docker
storage:
  directories:
    - path: /var/docker-compose
  files:
    - path: /etc/docker/nvidia-runtime-post-install.json
      mode: 0644
      contents:
        inline: |
          {
            "runtimes":
            {
              "nvidia":
              {
                  "path": "/usr/bin/nvidia-container-runtime",
                  "runtimeArgs": []
              }
            }
            ,"default-runtime": "nvidia"
          }
    - path: /etc/nvidia-container-runtime/config.toml
      mode: 0644
      contents:
        inline: |
          disable-require = false
          swarm-resource = "DOCKER_RESOURCE_GPU"

          [nvidia-container-cli]
          root = "/run/nvidia/driver"
          path = "/usr/bin/nvidia-container-cli"
          environment = []
          debug = "/var/log/nvidia-container-toolkit.log"
          load-kmods = true
          ldconfig = "/sbin/ldconfig"

          [nvidia-container-runtime]
          debug = "/var/log/nvidia-container-runtime.log"
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: public.zeus.home.shepherdjerred.com
    - path: /etc/docker/daemon.json
      mode: 0600
      contents:
        inline: |
          {
            "node-generic-resources": ["acme-linux=1", "acme-gpu=1"]
          }
    - path: /etc/selinux/config
      mode: 0644
      contents:
        inline: |
          # This file controls the state of SELinux on the system.
          # SELINUX= can take one of these three values:
          #     enforcing - SELinux security policy is enforced.
          #     permissive - SELinux prints warnings instead of enforcing.
          #     disabled - No SELinux policy is loaded.
          # See also:
          # https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-selinux/#getting-started-with-selinux-selinux-states-and-modes
          #
          # NOTE: In earlier Fedora kernel builds, SELINUX=disabled would also
          # fully disable SELinux during boot. If you need a system with SELinux
          # fully disabled instead of SELinux running with no policy loaded, you
          # need to pass selinux=0 to the kernel command line. You can use grubby
          # to persistently set the bootloader to boot with selinux=0:
          #
          #    grubby --update-kernel ALL --args selinux=0
          #
          # To revert back to SELinux enabled:
          #
          #    grubby --update-kernel ALL --remove-args selinux
          #
          SELINUX=permissive
          # SELINUXTYPE= can take one of these three values:
          #     targeted - Targeted processes are protected,
          #     minimum - Modification of targeted policy. Only selected processes are protected.
          #     mls - Multi Level Security protection.
          SELINUXTYPE=targeted
  links:
    - path: /etc/localtime
      target: ../usr/share/zoneinfo/America/Los_Angeles
systemd:
  units:
    - name: custom-bootupd-auto.service
      enabled: false
      contents: |
        [Unit]
        Description=Bootupd automatic update

        [Service]
        ExecStart=/usr/bin/bootupctl update
        RemainAfterExit=yes

        [Install]
        WantedBy=multi-user.target
    - name: rpm-ostree-install-docker-compose.service
      enabled: true
      contents: |
        [Unit]
        Description=Layer docker-compose with rpm-ostree
        Wants=network-online.target
        After=network-online.target
        # We run before `zincati.service` to avoid conflicting rpm-ostree
        # transactions.
        Before=zincati.service
        ConditionPathExists=!/var/lib/%N.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install --apply-live docker-compose
        ExecStart=/bin/touch /var/lib/%N.stamp

        [Install]
        WantedBy=multi-user.target
    - name: var-storage.mount
      enabled: false
      contents: |
        [Unit]
        Before=local-fs.target,docker.service
        ConditionPathExists=/dev/disk/by-uuid/c48e1b3a-4c8c-4488-82ee-45b6b377b61a

        [Mount]
        What=/dev/disk/by-uuid/c48e1b3a-4c8c-4488-82ee-45b6b377b61a
        Where=/var/storage
        Type=ext4

        [Install]
        WantedBy=multi-user.target
    - name: var-timemachine.mount
      enabled: false
      contents: |
        [Unit]
        Before=local-fs.target,docker.service
        ConditionPathExists=/dev/disk/by-uuid/49f949f8-a2f0-4e25-8723-19283b531ac4

        [Mount]
        What=/dev/disk/by-uuid/49f949f8-a2f0-4e25-8723-19283b531ac4
        Where=/var/timemachine
        Type=ext4

        [Install]
        WantedBy=multi-user.target
    - name: var-spare.mount
      enabled: false
      contents: |
        [Unit]
        Before=local-fs.target,docker.service
        ConditionPathExists=/dev/disk/by-uuid/d8ec49c8-97ee-4cf2-992c-c5c9fbff6c70

        [Mount]d8ec49c8-97ee-4cf2-992c-c5c9fbff6c708ec49c8-97ee-4cf2-992c-c5c9fbff6c70
        Where=/var/spare
        Type=ext4

        [Install]
        WantedBy=multi-user.target
    - name: clone-git-repo.service
      enabled: true
      contents: |
        [Unit]
        Wants=network-online.target
        After=network-online.target
        Description=Clone shepherdjerred/servers git repo

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        WorkingDirectory=/var/docker-compose
        ExecStart=/usr/bin/git clone https://github.com/shepherdjerred/servers/

        [Install]
        WantedBy=multi-user.target
    - name: nvidia-container-runtime.service
      enabled: true
      contents: |
        [Unit]
        Description=Layer nvidia-container-runtime
        After=network-online.target
        # We run before `zincati.service` to avoid conflicting rpm-ostree transactions.
        Before=zincati.service
        ConditionPathExists=!/var/lib/%N.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/sh -c 'FEDORA_VERSION_ID=$(cat /etc/os-release | grep VERSION_ID | cut -d = -f2); \
            curl -s -L https://container-toolkit-fcos.gitlab.io/container-runtime/stable/fedora$$FEDORA_VERSION_ID/container-runtime.repo \
                > /etc/yum.repos.d/container-runtime.repo'
        ExecStart=/usr/bin/rpm-ostree install --idempotent --allow-inactive nvidia-container-runtime
        # Once the nvidia-container-runtime has been installed docker needs to be configured to use it so we use jq to merge
        # in the runtime config details into config.json...
        ExecStart=/bin/sh -c 'if [[ -f /usr/bin/nvidia-container-cli && -f /etc/docker/nvidia-runtime-post-install.json ]]; then \
            touch /etc/docker/daemon.json; \
            jq -s "add" /etc/docker/daemon.json /etc/docker/nvidia-driver-post-install.json > /etc/docker/daemon-temp.json; \
            mv /etc/docker/daemon-temp.json /etc/docker/daemon.json; \
            rm /etc/docker/nvidia-driver-post-install.json; \
            /bin/touch /var/lib/%N.stamp; fi; reboot'
        Restart=on-failure
        RestartSec=60

        [Install]
        WantedBy=multi-user.target
